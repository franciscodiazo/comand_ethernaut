# Nivel 0: Hola Ethernaut

Este es el nivel 0 del juego[Ethernaut](https://ethernaut.openzeppelin.com/).

## requisitos previos
- Basics of [web3js](https://web3js.readthedocs.io/en/v1.5.2/getting-started.html)

## Atajos
has leído las instrucciones del nivel 0 y ha adquirido el éter de prueba. Los métodos de contrato de nivel se inyectan directamente en la consola de nuestro navegador, por lo que podemos comenzar a llamar a los métodos.

antes de iniciar: 

1. Set up MetaMask
2. Open the browser's console
    Open your browser's console: Tools > Developer Tools.
    comando (await chrome 64)
      player
3. Use the console helpers
      getBalance(player)
4. The ethernaut contract
      ethernaut
5. Interact with the ABI
      ethernaut.owner() 
7. Obtener una instancia de nivel
      level instance
8. Inspección del contrato
      contract 
9. Interactuar con el contrato para completar el nivel
      contract.info()

Empecemos. Las instrucciones piden llamar a este método en la consola:

```javascript
await contract.info()

// Output: 'You will find what you need in info1().'
```

Seguimos la salida y llamamos:

```javascript
await contract.info1()

// Output: 'Try info2(), but with "hello" as a parameter.'
```

Siguiente...
```javascript
await contract.info2("hello")

// Output: 'The property infoNum holds the number of the next info method to call.'
```

Para obtener `infoNum` llamamos captador público:
```javascript
await contract.infoNum().then(v => v.toString())

// Output: 42
```
Tenga en cuenta que `infoNum()` devuelve un objeto BigNumber, por lo que lo convertimos en una cadena para ver el número real.

Procediendo con `info42`:

```javascript
await contract.info42()

// Output: 'theMethodName is the name of the next method.'
```

De nuevo, siguiente salida:

```javascript
await contract.theMethodName()

// Output: 'The method name is method7123949.'
```

Y entonces:

```javascript
await contract.method7123949()

// Output: 'If you know the password, submit it to authenticate().'
```

Ok... pero cual es la contraseña? Inspeccionemos los contratos ABI:

```javascript
contract

// Output: { abi: ..., address: ..., ...., password: f () }
```
Al inspeccionar vemos que hay un `password` método para el contrato. Llamémoslo:

```javascript
await contract.password()

// Output: 'ethernaut0`
```

Tenemos la contraseña. Finalmente:

```javascript
await contract.authenticate('ethernaut0')
```
y confirme la transacción en metamask. Enviar instancia.
